---
title: "Complex data structures: Data frames"
subtitle: "<br>*Introduction to Bioinformatics - Module 2*"
author: "Nina Norgren"
format: 
    revealjs:
        theme: [serif, ../../../custom.scss]
        css: ../../module2.css
embed-resources: true
---

## Complex data structures

dim | Homogenous | Heterogenous
----|------------|-----------------
1d  | vectors    | list
2d  | matrices   | data frame
nd  | arrays     | n/a  

## Data frames  

A **data frame** or a **data table** is similar to a matrix. Elements of every column have the same type, but different columns can have different types. 

```{r, echo=T}
df <- data.frame(c(1:3),
                 c('a','b','c'),
                 c(TRUE, FALSE, TRUE))
df
```

## Data frames

Assign names to columns for readability

```{r, echo=T}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE, FALSE, TRUE))
df
```

## Data frames - accessing values

```{r, eval=TRUE, echo=FALSE}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE, FALSE, TRUE))
df
```

## Data frames - accessing values

```{r, eval=TRUE, echo=FALSE}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE, FALSE, TRUE))
df
```

<br>

First row:
```{r, echo=T}
df[1,]
```

## Data frames - accessing values

```{r, eval=TRUE, echo=FALSE}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE, FALSE, TRUE))
df
```

<br>

Second column:
```{r, echo=T}
df[,2] 
```

## Data frames - accessing values

```{r, eval=TRUE, echo=FALSE}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE, FALSE, TRUE))
df
```

<br>

The isRed column:
```{r, echo=T}
df[,'isRed']
```

## Data frames - accessing values

```{r, eval=TRUE, echo=FALSE}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE, FALSE, TRUE))
df
```

<br>

Rows 2-3 from the isRed column:
```{r, echo=T}
df[2:3, 'isRed']
```

## Data frames - accessing values

```{r, eval=TRUE, echo=FALSE}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE, FALSE, TRUE))
df
```

<br>

The first 2 characters in letter:
```{r, echo=T}
df$letter[1:2]
```

:::{.fragment}
```{r, echo=T}
df[1:2, 'letter']
```
:::

## Data frames - merging

A very useful feature of R is merging two data frames on certain key using  **merge**:

```{r, echo=T}
df1 <- data.frame(no=c(1:3),
                 letter=c("a","b","c"))
df2 <- data.frame(no=c(1:3),
                 letter=c("A","B","C"))
merge(df1, df2, by='no')
```

## Data frames - inspecting

The `str()` function provides a compact display of the internal structure of an R object

```{r, echo=T}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE,FALSE,TRUE))
str(df)
```

## Data frames - inspecting

The `summary()` function generates a summary of descriptive statistics for each variable in a data frame

```{r, echo=T}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE,FALSE,TRUE))
summary(df)
```

## Data frames - setting row and column names 

Update/set row- and column names using `rownames()` and `colnames()`

```{r, echo=T}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE,FALSE,TRUE))
df
```

## Data frames - setting row and column names 

Update/set row- and column names using `rownames()` and `colnames()`

```{r, echo=T}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE,FALSE,TRUE))
rownames(df) <- c('one', 'two', 'three')
df
```

## Data frames - setting row and column names 

Update/set row- and column names using `rownames()` and `colnames()`

```{r, echo=T}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE,FALSE,TRUE))
colnames(df) <- c('NO.', 'char', 'isBlue')
df
```

## Data frames - accessing

Access values using colnames and rownames

```{r, echo=T}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE,FALSE,TRUE))
rownames(df) <- c('one', 'two', 'three')
df$isRed
```

## Data frames - accessing

Access values using colnames and rownames

```{r, echo=T}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE,FALSE,TRUE))
rownames(df) <- c('one', 'two', 'three')
df['two',]
```

Note the difference in accessing colnames and rownames!

## Data frames - updating

Add a new column to the data frame

```{r, echo=T}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE,FALSE,TRUE))
df$grade <- c(34, 46, 12)
df
```

## Data frames - filtering

Filter rows based on column properties

```{r, echo=T}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE,FALSE,TRUE))
df[df$no. > 1, ]
```

## Data frames - filtering

Filter rows based on column properties

```{r, echo=T}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE,FALSE,TRUE))
new_df <- df[df$no. > 1, ]
new_df
```

## Factors

* A factor is a *categorical* variable that can take on a limited and fixed set of values, known as levels
* Commonly used in data frames to represent categorical data, such as the gender of individuals
* Essential for analyzing and visualizing categorical data


## Factors

```{r, echo=T}
df <- data.frame(
  Name = c("Alice", "Bob", "Charlie"),
  Gender = factor(c("Female", "Male", "Male"))
)
str(df)
```


