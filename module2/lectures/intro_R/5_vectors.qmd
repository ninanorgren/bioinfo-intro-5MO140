---
title: "Complex data structures: Vectors"
subtitle: "<br>*Introduction to Bioinformatics - Module 2*"
author: "Nina Norgren"
format: 
    revealjs:
        theme: [serif, ../../../custom.scss]
        css: ../../module2.css
embed-resources: true
---

## Complex data structures
Using the previously discussed basic data types/classes (numeric, integer, logical and character) one can construct more complex data structures:

dim | Homogenous | Heterogenous
----|------------|-----------------
1d  | vectors    | list
2d  | matrices   | data frame
nd  | arrays     | n/a  


## Vectors
A *vector* is a one dimensional data structure (a sequence) of *elements* of the same data type.

<br>

Constructed using core function `c()` (construct).

<br>

```{r, echo=T} 
vec <- c(1,2,5,7,9,27,45.5)
vec
```

## Combining vectors
```{r, echo=T}
v1 <- c(1,2,3)
v2 <- c(4,5,6)
v3 <- c(v1, v2)
v3
```

## Combining vectors
```{r, echo=T}
v1 <- c(1,2,3)
v2 <- c('a','b','c')
v3 <- c(v1, v2)
v3
```
Note! After combining vectors, all elements became character. It is called a *coercion*.


## Basic vector arithmetics
```{r, echo=T}
v1 <- c(1, 2, 3, 4)
v2 <- c(7, -9, 15.2, 4)
```

<br>
```{r, echo=T}
v1 + v2 # addition
```

## Basic vector arithmetics
```{r, echo=T}
v1 <- c(1, 2, 3, 4)
v2 <- c(7, -9, 15.2, 4)
```

<br>
```{r, echo=T}
v1 - v2 # subtraction
```

## Basic vector arithmetics
```{r, echo=T}
v1 <- c(1, 2, 3, 4)
v2 <- c(7, -9, 15.2, 4)
```

<br>
```{r, echo=T}
v1 * v2 # scalar multiplication
```

## Basic vector arithmetics
```{r, echo=T}
v1 <- c(1, 2, 3, 4)
v2 <- c(7, -9, 15.2, 4)
```

<br>
```{r, echo=T}
v1 / v2 # division
```

## Vectors - recycling rule
```{r, echo=T}
v1 <- c(1, 2, 3, 4, 5)
v2 <- c(1, 2)
```

<br>
```{r, echo=T}
v1 + v2
```

Values in the shorter vector will be **recycled** to match the length of the longer one: v2 <- c(1, 2, 1, 2, 1)

## Vectors - indexing
Access or retrieve particular elements of a vector by using the [] notation:
```{r, echo=T}
vec <- c('a', 'b', 'c', 'd', 'e')
vec[1] # the first element
```

::: {.fragment}
```{r, echo=T}
vec[5] # the fifth element
```
::: 

::: {.fragment}
```{r, echo=T}
vec[-1] # remove the first element
```
::: 

::: {.fragment}
R is 1-based!
:::

## Vectors - indexing
And what happens if we want to retrieve elements outside the vector?
```{r, echo=T}
vec[0] # R counts elements from 1
vec[78] # Index past vector length
```
>Element with index **lower** than the index of the first element -> you will get an empty vector of the same type as the original vector.

## Vectors - indexing
And what happens if we want to retrieve elements outside the vector?
```{r, echo=T}
vec[0] # R counts elements from 1
vec[78] # Index past vector length
```
>Element **higher** than the vector's length -> you get an NA value.

## Vectors - indexing
Retrieve elements of a vector using a vector of indices:
```{r, echo=T}
vec <- c('a', 'b', 'c', 'd', 'e')
vec.ix <- c(1,3,5)
vec[vec.ix]
```

## Vectors - indexing
Or even a logical vector:
```{r vec.index.vec.log, echo=T}
vec <- c('a', 'b', 'c', 'd', 'e')
vec.ix <- c(TRUE, FALSE, TRUE, FALSE, TRUE)
vec[vec.ix]
```

## Vectors - indexing
Get smaller sequence of the vector:
```{r, echo=T}
vec <- c('a', 'b', 'c', 'd', 'e')
vec[3:5]
```

## Vectors - indexing conditions
Also logical expressions are allowed in indexing:
```{r, echo=T}
vec <- c(1, 2, 3, 4, 5)
vec[vec < 3]
```

<br>

:::{.fragment}
```{r, echo=T}
new.vec <- vec[vec < 3]
new.vec
```
:::

## Vectors - more operations
Reverse a vector:
```{r, echo=T}
vec <- c(1, 2, 3, 4, 5)
rev(vec)
```


## Vectors - size
To get the size of a vector, use `length()`:
```{r, echo=T}
vec <- c(1:78)
length(vec)
```

## Vectors - substitute element
To substitute an element in a vector:
```{r, echo=T}
vec <- c(1:5)
vec
```

<br>

:::{.fragment}
```{r, echo=T}
vec[3] <- 'a' # Note the coercion!
vec 
```
:::


## Vectors - sorting
To sort values of a vector
```{r, echo=T}
vec <- c(1:5, 1:3)
vec
```

<br>

:::{.fragment}
```{r, echo=T}
sort(vec)
```
:::

## Vectors - sorting
To sort values of a vector
```{r, echo=T}
vec <- c(1:5, 1:3)
vec
```

<br>

```{r, echo=T}
sort(vec, decreasing = TRUE)
```

## Lists

A *list* is a collection of elements that can be of *various* data types

```{r, echo=T}
name <- 'R2D2'
weight <- 21
data <- list(name=name, weight)
data
```

## Lists

A *list* is a collection of elements that can be of *various* data types

```{r, echo=T}
name <- 'R2D2'
weight <- 21
data <- list(name=name, weight)
data$name
```

## Lists

A *list* is a collection of elements that can be of *various* data types

```{r, echo=T}
name <- 'R2D2'
weight <- 21
data <- list(name=name, weight)
data[[2]]
```

## Summary 

* Vectors are sequences of elements containing the same data type 
* Can be accessed and manipulated using indexing 
* Lists are sequences of elements that can contain different data types