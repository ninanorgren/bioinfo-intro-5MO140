---
title: "Reading data into R"
subtitle: "<br>*Introduction to Bioinformatics - Module 2*"
author: "Nina Norgren"
format: 
    revealjs:
        theme: [serif, ../../../custom.scss]
        css: ../../module2.css
embed-resources: true
---

## Reading data

* Reading data is one of the most consuming and most cumbersome aspects of bioinformatics
* R provides a number of ways to read and write data stored on different media and in different formats.
* Most common function is the `read.table()` function. Reads data into a data.frame structure 


## Reading data - read.table

The function is declared in the following way:  


```{r, eval=FALSE, echo=TRUE}
#| class-source: smaller_code
#| classes: smaller_code

read.table(file, header = FALSE, sep = "", 
           quote = "\"'", dec = ".",
           numerals = c("allow.loss","warn.loss","no.loss"),
           row.names, col.names, as.is = !stringsAsFactors,
           na.strings = "NA", colClasses = NA, nrows = -1,
           skip = 0, check.names = TRUE, 
           fill = !blank.lines.skip, strip.white = FALSE, 
           blank.lines.skip = TRUE, comment.char = "#",
           allowEscapes = FALSE, flush = FALSE,
           stringsAsFactors = FALSE,
           fileEncoding = "", encoding = "unknown", 
           text, skipNul = FALSE)*
```


## `read.table` parameters

* **file** - the path to the file that contains data
* **header** - a logical indicating whether the first line of the file contains variable names
* **sep** - a character determining variable delimiter, e.g. comma for csv files
* **dec** - a character determining the decimal separator
* **row/col.names** - vectors with row/column names
* **na.strings** - a character used for missing data
* **fill** - add NA to the end of shorter rows
* **stringsAsFactors** - a logical. Rather self explanatory

## `read.table()` and its siblings  

The `read.table()` function has some siblings, functions with particular arguments pre-set to a specific value to spare some time:

* `read.csv()` and `read.csv2()` with comma and semicolon as default `sep` and dot and comma as `dec` respectively,
* `read.delim()` and `read.delim2()` for reading tab-delimited files.

However, mostly use the canonical `read.table()` as it is the most flexible one.

## `read.table()` - example use

```{r, echo=T}
iris.df <- read.table(file = 'data/iris.txt',
           sep = '\t', header = TRUE)
iris.df[1:5, 1:3]
class(iris.df)
```

## `read.table()` - example use

```{r, echo=T, eval=T}
persons <- read.table(file='data/persons.txt',
              sep = ',', header = TRUE)
persons
```

## `read.table()` - example use

If needed, convert columns to factors for later plotting or calculations

```{r, echo=T, eval=T}
persons <- read.table(file='data/persons.txt',
              sep = ',', header = TRUE)
persons$Gender <- as.factor(persons$Gender)
str(persons)
```


## What if you encounter errors?

* StackOverflow
* Google: just type R and copy the error you got without your variable names
* Inspect the file in the terminal:
  * has the header line the same number of columns as the first line?
  * what is the delimiter?

And if this does not work, try splitting the file in half until it works

## Writing with `write.table()`

`read.table()` has the counterpart `write.table()`, which is used for writing to files:

```{r, echo=T, eval=F}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE,FALSE,TRUE))
write.table(df, file = 'data/my_df.txt')
```

## Writing with `write.table()`

`read.table()` has the counterpart `write.table()`, which is used for writing to files:

```{r, echo=T, eval=F}
df <- data.frame(no.=c(1:3),
                 letter=c('a','b','c'),
                 isRed=c(TRUE,FALSE,TRUE))
write.table(df, file = 'data/my_df.txt')
```

<br>

![](img/my_df.PNG){width=80%}

