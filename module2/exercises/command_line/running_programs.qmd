---
title: "Running programs through the command line"
format:
  html:
    theme: yeti
    css: ../../module2_exercises_bash.css
---

##  üéØ Objective

Practice retrieving external files and manipulating them using command line programs with options.

## üìÑ VCF file
In this exercise we will be looking at genetic variants found in the human genome, and their association to different phenotypes. We will be using the data from [ClinVar](https://www.ncbi.nlm.nih.gov/clinvar/intro/), which has searchable data for most of human variants. As an example, see [this entry](https://www.ncbi.nlm.nih.gov/clinvar/variation/7685/?oq=rs4988235&m=NM_002299.2(LCT):c.-13907C%3ET) for the mutation that causes lactase persistence in many in the Northern population, and the associated evidence.

The file we will be working with is a VCF file (Variant Calling Format), which consists of variants, meta data about the variants, and possible genotypes from individuals. You can read more about the VCF format [here](https://samtools.github.io/hts-specs/VCFv4.2.pdf). The file we will be working with is not from a single individual, but rather all aggregated variants found, and their predicted effect on phenotype.

## üìù Instructions

#### **Get the VCF file**
Navigate to the `rawdata` folder created in previous exercise. Use `pwd` to first figure out what folder you are in, and use relative paths to navigate using `cd`.

The file is located on an FTP server, with the address http://beagle.henlab.org/public/course_introtobioinfo/clinvar.vcf.gz. Get the file with `wget` to the `rawdata` folder.

<details>
  <summary>See code:</summary>
````{bash}
# First use cd to navigate to rawdata folder
wget http://beagle.henlab.org/public/course_introtobioinfo/clinvar.vcf.gz
````
</details>


Run `ls` to make sure that the file is there. If you run `ls -lh` you will also see the size of the files in the folder.

#### **Inspect the file**
This file is packed with gzip, a slightly better compression than normal zip-files. To unpack them you would use `gunzip` instead of `unzip`. However, as these files tend to be large, most bioinformatics software can directly handle different zipped files. We can still use a few commands to inspect the file as before, just with a slight modification. Try the following commands and see what happens:

::: {.callout-important}
On macOS the `zcat` command has to be replaced with `gzcat` to work!
::: 

```
zless clinvar.vcf.gz
zless -S clinvar.vcf.gz
zcat clinvar.vcf.gz | head
zcat clinvar.vcf.gz | tail
```

If you use the `zless` command with the `-S` tag, you will not line-break the text in the window, making it easier to read. Do not run the `zcat` command on this file, as it is rather large, but you can use `zcat` and pipe the results into head, thereby only displaying the first 10 lines. 

As you can see, many of the normal commands have a related command that works on zipped files (cat -> zcat, etc), but not all of them.

Normally you can check how many lines is in a file using the `wc` (word count) command. But as the `wc` command does not work on zipped files, we can first use the `zcat` command, and then pipe the output to `wc`:

```
zcat clinvar.vcf.gz | wc
```

We can also find out how many unique chromosomes are in the file. To do this we will use a combination of `zgrep`, `cut` and `uniq`. We will use zgrep with the -v flag, inversing the command, meaning we will grep everything that is NOT matching. The `cut` command cuts out a specific column in the data, defined by the -f flag. And lastly, the `uniq` command removes duplicates, leaving only unique values. We will pipe these commands together using the `|` symbol:

<details>
  <summary>See code:</summary>
````{bash}
zgrep -v '#' clinvar.vcf.gz | cut -f1 | uniq
````
</details>

Using this command we can see that we have some chromosomes in there that we might not be so interested in for this analysis. X, Y, MT, are the sex chromosomes and the mitochondrial chromosomes. NT_113889.1, NT_167222.1, NW_003315925.1, and NW_003315947.1 are contigs or sequences that are not mapped to any of the most common chromosomes, thereby not interesting for our analysis either. Later, we will remove these chromosomes.

#### **Install bcftools** 

bcftools is a very useful command line program to manipulate and filter VCF files. It can run directly on gzipped files that are indexed with tabix, another program that creates indexes of VCF files, which allows for faster access. Start by installing bcftools and tabix using `apt`. When installing programs, it does not matter what folder you are currently in, as the programs are installed in a specified location regardless.

<details>
  <summary>See code (linux):</summary>
````{bash}
sudo apt install bcftools
sudo apt install tabix
````
</details>

<details>
  <summary>See code (macOS):</summary>
````{bash}
# install Homebrew if not already done
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew install bcftools
brew install tabix
````
</details>

Once the programs are installed, verify that everything seems to be installed correctly by running:

```
bcftools
tabix 
```

That should list the version of the program and how to use it. To get even more information on how to run these programs, you can use `man` (manual):

```
man bcftools
man tabix
```

For even more documentation on how to run bcftool, check out their [website](https://samtools.github.io/bcftools/bcftools.html). Tabix instructions can be found [here](https://www.htslib.org/doc/tabix.html).


#### **Use bcftools** 

Let's start using bcftools to first filter out our extra chromosomes that we are not interested in. For this we will use bcftools view, on a tabix indexed vcf file. Try reading the documentation and figure out how we can filter to only keep chromosomes 1-22, there are a few different ways. Remember to keep your rawdata separate from your processed data.

<details>
  <summary>See one solution:</summary>
````{bash}
cd ..
tabix rawdata/clinvar.vcf.gz
bcftools view -r '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22' rawdata/clinvar.vcf.gz -o processed_data/clinvar_chr.vcf
````
</details>

Check if we managed to remove the chromosomes we were not interested in:

<details>
  <summary>See code:</summary>
````{bash}
grep -v '#' processed_data/clinvar_chr.vcf | cut -f1 | uniq
````
</details>


#### **Final cleanup**

Now let's take a look at the last column, the INFO field in this file: 

![](img/vcf_info.PNG){width=900}

Inspect the INFO field closely. What we are interested in for this exercise is the last entry, where the impact of the variant is listed. Some of the classifications are:  

- missense mutation 
- synonymous mutation 
- nonsynonymous mutation 
- intron variant 

Plus other types of variants. So how do we keep only this information? In this case bcftools can only do so much, and we might have to rely on our command line skills. The skills needed to remove this excess information is beyond the scope of this course, BUT, let's give it a go anyway, using our friend ChatGPT. 

Best way to use ChatGPT is to input a line of the VCF file, and ask very specifically how to remove the excess information in the INFO field. Learning how to query and use ChatGPT is a good skill to have as a bioinformatician. However, as we all know, ChatGPT has a tendendy of fabricating information sometimes. So never trust the output without validating the results. 

If you did not manage to get code from ChatGPT to remove the information, below is one example of how it can be done. Copy paste this code, together with an example line from the VCF file, into ChatGPT and have it explain what the code does. 

<details>
  <summary>See code:</summary>
````{bash}
cat clinvar_chr.vcf | awk 'BEGIN {OFS=FS="\t"} {sub(/.*\|/, "", $8)}1' > clinvar_chr_info.vcf
````
</details>


We will later use this file to import into R, and do some plotting. Let's do a final tweak and remove the meta data in the beginning of the file, as this will make it easier to load into R. Use `grep` to remove all lines starting with ##, and write the results to a new file.

<details>
  <summary>See code:</summary>
````{bash}
grep -v '##' clinvar_chr_info.vcf > clinvar_chr_info_meta.vcf
````
</details>

Inspect the file and make sure everything looks as it should. Now, the file is prepared for being imported into R where we will continue our analysis. Feel free to remove any unnecessary files no longer needed with the `rm` commands. Just be sure not to remove any of the files you might need.